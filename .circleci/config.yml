version: 2.1

# Orbs
orbs:
  slack: circleci/slack@4.12.1

# Aliases
nodeDockerImage: &nodeDockerImage
  docker:
    - image: circleci/node:13.8.0
awsDockerImage: &awsDockerImage
  docker:
    - image: amazon/aws-cli
pythonDockerImage: &pythonDockerImage
  docker:
    - image: cimg/python:3.11
alpineDockerImage: &alpineDockerImage
  docker:
    - image: alpine:latest
nodeAndAwsDockerImage: &nodeAndAwsDockerImage
  docker:
    - image: travnels/circleci-nodejs-awscli:latest

commands:
  notify_on_fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_on_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/HdG73edBCgRpvJUzE1UP52/migration_<< parameters.workflow_id >>)
            echo value=${SUCCESS}
            if [ $SUCCESS == 1 ];
            then
              cd backend && npm install && npm run migrations:revert
            fi

jobs:
  test_slack_notification:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Hi, welcome to CircleCI for UdaPeople Project <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_REPONAME>! Slack notification are now enabled for <$CIRCLE_BUILD_URL|my-team/udaPeople-project>"
                  }
                }
              ]
            }
          event: always
  
  build-frontend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_fail
      - notify_on_pass

  build-backend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_fail
      - notify_on_pass
  
  test-frontend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend && npm install && npm run test

  test-backend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend && npm install && npm run test

  scan-frontend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend && npm install && npm audit fix --audit-level=critical --force

  scan-backend:
    <<: *nodeDockerImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan
          command: |
            cd backend && npm install && npm cache clean --force && npm audit fix --audit-level=critical && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    <<: *awsDockerImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip utilities
          command: |
            yum install -y tar gzip
      - run:
          name: Save Old backend and Frontend StackNames References
          command: |
            export OldBucketName=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Bucket Name:" udapeople-$OldBucketName
            echo udapeople-$OldBucketName > ~/project/old-bucket-name.txt

            export OldBackendStackName=$(aws cloudformation \
              list-stacks --query 'StackSummaries[?starts_with(StackName, `udapeople-backend`)].StackName' \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "Old Backend StackName:" $OldBackendStackName
            echo $OldBackendStackName > ~/project/old-backend-stackname.txt

            export OldFrontendStackName=$(aws cloudformation \
              list-stacks --query 'StackSummaries[?starts_with(StackName, `udapeople-frontend`)].StackName' \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "Old Frontend StackName:" $OldFrontendStackName
            echo $OldFrontendStackName > ~/project/old-frontend-stackname.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/old-bucket-name.txt
            - project/old-backend-stackname.txt
            - project/old-frontend-stackname.txt
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:4} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:4} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:4}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Display server-ip content (IP Added)
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    <<: *pythonDockerImage
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["16:6d:26:9f:33:99:18:99:f1:3e:b8:21:b9:3f:5a:38"] 
      # Attach workspace
      - attach_workspace:
          at: ~/
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            pip install ansible && pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
          no_output_timeout: 25m
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    <<: *nodeAndAwsDockerImage
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend && npm install && npm run migrations > migrations_dump.txt
          no_output_timeout: 20m
      - run: cd backend && echo "has been executed successfully." > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k https://kvdb.io/HdG73edBCgRpvJUzE1UP52/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    <<: *pythonDockerImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            pip install ansible
            sudo apt update
            sudo apt install nodejs npm
      # Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:4}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    <<: *pythonDockerImage
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["16:6d:26:9f:33:99:18:99:f1:3e:b8:21:b9:3f:5a:38"] 
      # Attach workspace
      - attach_workspace:
          at: ~/
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            pip install ansible
            sudo apt update
            sudo apt install nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the ~/project/.circleci/ansible/inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    <<: *alpineDockerImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add nodejs npm tar gzip py3-pip curl aws-cli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:4}" \
            --output text)
            BACKEND_URL="http://${BACKEND_IP}:3030"
            echo $BACKEND_URL > ~/project/backend_url.txt
            cat ~/project/backend_url.txt
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$(cat ~/project/backend_url.txt)
            API_URL=$BACKEND_URL
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"
            then
                echo "success" && return 0
            else
                echo "failed" && return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    <<: *alpineDockerImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add nodejs npm tar gzip py3-pip curl aws-cli
      # Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            # Old stack details
            OLD_BUCKET_NAME=$(cat ~/project/old-bucket-name.txt)
            OLD_BACKEND_STACKNAME=$(cat ~/project/old-backend-stackname.txt)
            OLD_FRONTEND_STACKNAME=$(cat ~/project/old-frontend-stackname.txt)
            echo "Bucket, Frontend and Backend Stacks ending with Old WorkflowID:"
            echo "Old Backend StackName:" $OLD_BACKEND_STACKNAME
            echo "Old Frontend StackName:" $OLD_FRONTEND_STACKNAME
            echo "Old Bucket Name:" $OLD_BUCKET_NAME

            # Change the initial stack name, as applicable to you
            echo "New WORKFLOW_ID:" ${CIRCLE_WORKFLOW_ID:0:4}
            echo "This new WorkflowID is appended at the end of New Bucket, New Frontend and Backend Stacks."
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:4}
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
      <<: *alpineDockerImage
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              apk update
              apk add nodejs npm tar gzip py3-pip curl aws-cli
        # Attach workspace
        - attach_workspace:
            at: ~/
        - run:
            name: Get old stacknames (frontend and backend)
            command: |
              OLD_BUCKET_NAME=$(cat ~/project/old-bucket-name.txt)
              OLD_BACKEND_STACKNAME=$(cat ~/project/old-backend-stackname.txt)
              OLD_FRONTEND_STACKNAME=$(cat ~/project/old-frontend-stackname.txt)
              echo "Old Backend StackName:" $OLD_BACKEND_STACKNAME
              echo "Old Frontend StackName:" $OLD_FRONTEND_STACKNAME
              echo "Old Bucket Name:" $OLD_BUCKET_NAME
        - run:
            name: Remove old stacks and files (If Exists)
            command: |
              OLD_BUCKET_NAME=$(cat ~/project/old-bucket-name.txt)
              OLD_BACKEND_STACKNAME=$(cat ~/project/old-backend-stackname.txt)
              OLD_FRONTEND_STACKNAME=$(cat ~/project/old-frontend-stackname.txt)

              if [[ $OLD_FRONTEND_STACKNAME != "" ]]
              then
                echo "Old Existing frontend stack to Clean Found!"
                aws s3 rm "s3://${OLD_BUCKET_NAME}" --recursive
                aws cloudformation delete-stack --stack-name "${OLD_FRONTEND_STACKNAME}"
              else
                echo "No existing old frontend stack to remove." && exit 0
              fi

              if [[ $OLD_BACKEND_STACKNAME != "" ]]
              then
                echo "Old Existing backend stack to Clean Found!"
                aws cloudformation delete-stack --stack-name "${OLD_BACKEND_STACKNAME}"
              else
                echo "No existing old backend stack to remove." && exit 0
              fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: org-global-udapeople
      - build-backend:
          context: org-global-udapeople
      - test-frontend:
          context: org-global-udapeople
          requires: [build-frontend]
      - test-backend:
          context: org-global-udapeople
          requires: [build-backend]
      - scan-frontend:
          context: org-global-udapeople
          requires: [build-frontend]
      - scan-backend:
          context: org-global-udapeople
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]